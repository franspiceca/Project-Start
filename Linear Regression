import pandas as pd
import numpy as np

##Reading file, Converting dates to datetime format
df = pd.read_csv("pls_fy18_state_pud18i.csv", parse_dates=['STARTDAT','ENDDATE'])

##Creating dictionary to have index position for each column head
col_mapping_dict = {c[0]:c[1] for c in enumerate(df.columns)}
col_mapping_dict

##Cutting out unneeded columns from the data frame
df = df.iloc[:, np.r_[0,1,4,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,59,61,63,65,67,69,71,73,75,77,79,81,83,85,117,119,127,128]]

##Removing entries with any null values (in this set, "-1" means value is missing)
df = df[df['TOTSTAFF'] >= 0]

#Changing to categorical for testing/ML
df.OBEREG = pd.Categorical(df.OBEREG)
df.OBEREG = df.OBEREG.cat.codes

##Drop columns that are territories/not states: Guam, American Samoa, Northern Mariana Islands & D.C.
df = df.drop(df.index[[3,8,12,27]])

from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression

features = df[["POPU_LSA", "POPU_ST", "CENTLIB", "BRANLIB", "BKMOB", "TOTSTAFF"]]

target = df.TOTINCM

X = features
y = target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

lr=LinearRegression()

lr.fit(X_train, y_train)
lr.score(X_train, y_train)

print(lr.score(X_test, y_test))

preds = lr.predict(X_test)

import math
from sklearn.metrics import explained_variance_score, mean_absolute_error, r2_score, mean_squared_error

score = explained_variance_score(y_test, preds)
mae = mean_absolute_error(y_test, preds)
rmse = math.sqrt(mean_squared_error(y_test, preds))
r2 = r2_score(y_test, preds)
    
print("score = {:.5f} | MAE = {:.3f} | RMSE = {:.3f} | R2 = {:.5f}"
          .format(score, mae, rmse, r2))

print(lr.intercept_)
print(lr.coef_)

obs1 = {   "POPU_LSA": 50000, 
           "POPU_ST": 50000,
           "CENTLIB": 200,
           "BRANLIB": 70,
           "BKMOB": 10, 
           "TOTSTAFF": 1500}

new_fund = [obs1["POPU_LSA"], obs1["POPU_ST"], obs1["CENTLIB"], 
            obs1["BRANLIB"], obs1["BKMOB"], obs1["TOTSTAFF"],]
X_new = [new_fund]

lr.predict(X_new)

#Fitting Ridge regression on Training data
from sklearn.linear_model import Ridge
rr=Ridge(solver='svd')
rr.fit(X_train, y_train)

rr.score(X_train, y_train)

#Testing Ridge Regression on the test data and including additional accuracy models
print(rr.score(X_test, y_test))

preds = rr.predict(X_test)

score = explained_variance_score(y_test, preds)
mae = mean_absolute_error(y_test, preds)
rmse = math.sqrt(mean_squared_error(y_test, preds))
r2 = r2_score(y_test, preds)
   
print("score = {:.5f} | MAE = {:.3f} | RMSE = {:.3f} | R2 = {:.5f}"
          .format(score, mae, rmse, r2)) 
rr.predict(X_new)


##User definded function for scores
import math
from sklearn.metrics import explained_variance_score, mean_absolute_error, r2_score, mean_squared_error

def get_all_scores(y_test, preds):
    score = explained_variance_score(y_test, preds)
    mae = mean_absolute_error(y_test, preds)
    RMSE = math.sqrt(mean_squared_error(y_test, preds))
    R2 = r2_score(y_test, preds)
    return print("score = {:.5f} | MAE = {:.3f} | RMSE = {:.3f} | R2 = {:.5f}".format(score, mae, rmse, r2))

get_all_scores(y_test, preds)
